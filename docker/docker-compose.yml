version: '3.8'

services:
  # MLOps API Service
  mlops-api:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
    container_name: mlops-distillbert-api
    ports:
      - "8000:8000"
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - WORKERS=4
      - RELOAD=false
      - LOG_LEVEL=INFO
      - MODEL_CACHE_DIR=/app/models
      - ENABLE_METRICS=true
    volumes:
      - ./models:/app/models:rw
      - ./logs:/app/logs:rw
      - ./config:/app/config:ro
    networks:
      - mlops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mlops-api.rule=Host(`api.mlops.local`)"
      - "traefik.http.services.mlops-api.loadbalancer.server.port=8000"

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: mlops-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mlops-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: mlops-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - mlops-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: mlops-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mlops-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Load balancer (optional)
  nginx:
    image: nginx:alpine
    container_name: mlops-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - mlops-network
    restart: unless-stopped
    depends_on:
      - mlops-api

  # Model training service (for CI/CD)
  model-trainer:
    build:
      context: .
      dockerfile: docker/Dockerfile.trainer
    container_name: mlops-trainer
    environment:
      - PYTHONPATH=/app
      - TRAINING_DATA_PATH=/app/data
      - MODEL_OUTPUT_PATH=/app/models
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    volumes:
      - ./data:/app/data:ro
      - ./models:/app/models:rw
      - ./config:/app/config:ro
    networks:
      - mlops-network
    profiles:
      - training
    restart: "no"

  # MLflow for experiment tracking
  mlflow:
    image: mlflow/mlflow:latest
    container_name: mlops-mlflow
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://mlflow:mlflow@postgres:5432/mlflow
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow/artifacts
    volumes:
      - mlflow_data:/mlflow
    networks:
      - mlops-network
    restart: unless-stopped
    depends_on:
      - postgres
    command: >
      bash -c "mlflow server 
      --backend-store-uri postgresql://mlflow:mlflow@postgres:5432/mlflow 
      --default-artifact-root /mlflow/artifacts 
      --host 0.0.0.0 
      --port 5000"

  # PostgreSQL for MLflow backend
  postgres:
    image: postgres:13
    container_name: mlops-postgres
    environment:
      - POSTGRES_DB=mlflow
      - POSTGRES_USER=mlflow
      - POSTGRES_PASSWORD=mlflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mlops-network
    restart: unless-stopped

  # Jupyter notebook for development (optional)
  jupyter:
    build:
      context: .
      dockerfile: docker/Dockerfile.jupyter
    container_name: mlops-jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=mlops123
    volumes:
      - .:/home/jovyan/work
      - jupyter_data:/home/jovyan/.jupyter
    networks:
      - mlops-network
    profiles:
      - development
    restart: unless-stopped

volumes:
  prometheus_data:
  grafana_data:
  redis_data:
  mlflow_data:
  postgres_data:
  jupyter_data:

networks:
  mlops-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16